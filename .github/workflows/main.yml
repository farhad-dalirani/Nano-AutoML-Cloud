# Name of the workflow shown in the GitHub Actions UI
name: workflow

# Workflow trigger: on push to the 'main' branch, excluding changes to README.md
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

# Permissions granted to the workflow 
permissions:
  id-token: write
  contents: read

jobs:
  # Job: Continuous Integration (CI)
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest  # Runs on GitHub-hosted Ubuntu runner
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3  # Clones the repo code
    
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Lint code
        run: python -m black ml_pipeline/ app.py push_data.py  # Format the specified Python files and directory using the Black code formatter

      - name: Run unit tests
        run: echo "Currently no public unit tests"  # Placeholder for actual test commands

  # Job: Build and Push Docker Image to ECR (CD step 1)
  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration  # Waits for integration job to finish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1  # Authenticates Docker to ECR

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Build Docker image and push to Amazon ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
  
  continuous-deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted  #Persistent Listening for Triggers, the EC2 instance is running the self-hosted runner continuously.
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Check disk space before cleanup
        run: df -h
      
      - name: Aggressive Docker Cleanup
        run: |
          docker container prune -f
          docker image prune -af
          docker volume prune -f
          docker builder prune -af
          docker system df

      - name: Check disk space after cleanup
        run: df -h

      - name: Pull latest images
        run: |
         docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
         
      - name: Stop and remove container if running
        run: |
          CONTAINER_ID=$(docker ps -q --filter "name=nanoautomlcloud")
          if [ -n "$CONTAINER_ID" ]; then
            docker stop nanoautomlcloud
            docker rm -fv nanoautomlcloud
          else
            echo "Container nanoautomlcloud is not running."
          fi

      - name: Create .env file
        run: |
          cat <<EOF > .env
          MONGO_DB_URL=${{ secrets.MONGO_DB_URL }}
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
          AWS_ECR_LOGIN_URI=${{ secrets.AWS_ECR_LOGIN_URI }}
          ECR_REPOSITORY_NAME=${{ secrets.ECR_REPOSITORY_NAME }}
          EOF

      - name: Run Docker Image to serve users
        run: |
          docker run -d -p 8000:8000 -p 5000:5000 --ipc="host" --name=nanoautomlcloud \
          --env-file .env \
          ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      - name: Remove .env file
        run: rm -f .env
      
      - name: Clean previous images and containers
        run: |
          docker system prune -f
      
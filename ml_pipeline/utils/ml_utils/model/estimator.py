import os
import sys 
import numpy as np
import pandas as pd
from typing import Union

from ml_pipeline.exception.exception import MLPipelineException
from ml_pipeline.logging.logger import logging

from ml_pipeline.constants.training_pipeline import SAVED_MODEL_DIR, MODEL_FILE_NAME


class MLModel:
    """
    A wrapper class that combines a data preprocessor and a trained machine learning model
    to enable streamlined prediction workflows.

    Attributes:
        preprocessor: An object that implements a `transform` method to preprocess input features.
        model: A trained machine learning model that implements a `predict` method.

    Methods:
        predict(x):
            Transforms input features using the preprocessor and generates predictions using the model.
    """

    def __init__(self, preprocessor, model, model_task: str):
        """
        Initializes the MLModel with a preprocessor and a trained model.

        Args:
            preprocessor: An object with a `transform` method for preprocessing input data.
            model: A trained model with a `predict` method for generating predictions.
            model_task: type of task that model does: classification or regression

        Raises:
            MLPipelineException: If an error occurs during initialization.
        """
        try:
            self.preprocessor = preprocessor
            self.model = model
            self.model_task = model_task
        except Exception as e:
            raise MLPipelineException(e)
        
    def predict(self, x: Union[pd.DataFrame, np.ndarray]):
        """
        Generates predictions for the given input data after preprocessing.

        Args:
            x: Raw input data (e.g., a pandas DataFrame or NumPy array) to be transformed and predicted.

        Returns:
            y_pred: Predictions generated by the model.

        Raises:
            MLPipelineException: If an error occurs during transformation or prediction.
        """
        try:
            x_transformed = self.preprocessor.transform(x)
            y_pred = self.model.predict(x_transformed)
            return y_pred
        except Exception as e:
            raise MLPipelineException(e)